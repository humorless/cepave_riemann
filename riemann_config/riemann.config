; -*- mode: clojure; -*-
; vim: filetype=clojure

(require '[clj-http.client :as client]
         '[cheshire.core :as json]
         '[riemann.query :as query])

; Init logging. No file parameter, log to stdout.
(logging/init)

(def hostname (.getHostName (java.net.InetAddress/getLocalHost)))


(tcp-server {:host "0.0.0.0"})
(udp-server {:host "0.0.0.0"})
(ws-server {:host "0.0.0.0"})
(repl-server {:host "0.0.0.0"})
(graphite-server {:host "0.0.0.0"})

(instrumentation {:enabled? false})

; reap expired events every 10 seconds
(periodically-expire 10 {:keep-keys [:host :service :tags :metric :ttl :index-time]})

; some helpful functions
(defn now []
    (Math/floor (unix-time)))

(include "conf.d/")
(require '[falcon :as f])

; real processing
(let [index (default :ttl 300 (index))]
    (streams index)
)

;(streams
;  (f/maximum 3
;    (where (> metric 90)
;      #(info "maxmium alert event!" %))))

;(streams
;  (f/average 3
;    (where (> metric 90)
;      #(info "average alert event!" %))))

(defn show
  [e]
  ((juxt :metric :prev-metric) e))

(streams
  (f/diff 3 #(> % 9)
    #(info "diff alert event!!!" (show %))))

(streams
  (f/pdiff 3 #(> % 0.1)
    #(info "pdiff alert event!!!" (show %))))
