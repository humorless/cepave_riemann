; -*- mode: clojure; -*-
; vim: filetype=clojure

(require '[clj-http.client :as client]
         '[cheshire.core :as json]
         '[riemann.query :as query])

; Init logging. No file parameter, log to stdout.
(logging/init)

(def hostname (.getHostName (java.net.InetAddress/getLocalHost)))

(tcp-server {:host "0.0.0.0"})
(udp-server {:host "0.0.0.0"})
(ws-server {:host "0.0.0.0"})
(repl-server {:host "0.0.0.0"})
(graphite-server {:host "0.0.0.0"})

(instrumentation {:enabled? false})

; reap expired events every 10 seconds
(periodically-expire 10 {:keep-keys [:host :service :tags :metric :ttl :index-time]})

; some helpful functions
(defn now []
  (Math/floor (unix-time)))

(include "conf.d/")
(require '[falcon :as f])

; real processing
(let [index (default :ttl 300 (index))]
  (streams index))

;(streams
;  (f/maximum 3
;    (where (> metric 90)
;      #(info "maxmium alert event!" %))))

;(streams
;  (f/average 3
;    (where (> metric 90)
;      #(info "average alert event!" %))))

(defn show
  [e]
  ((juxt :metric :prev-metric) e))

;(streams
; (f/diff 3 #(> % 9)
;         #(info "diff alert event!!!" (show %))))

;(streams
; (f/pdiff 3 #(> % 0.1)
;          #(info "pdiff alert event!!!" (show %))))

;(streams
;  (where (service "net.if.in.bits")
;    #(info "show hostgroup of event" (f/event2hostgroup %))
;    #(info "show the hosts of hostgroup" (mapv f/hostgroup2hosts (f/event2hostgroup %)))))

(subscribe "group" #(info "show scription" %))

; f/grouped-any? is inspired by riemann's tagged-any?
(subscribe "group"
  (smap (fn [e]
          (when (f/grouped-any? ["hostgroup_OWL", "hostgroup_AA"] e) e))
        #(info "test selected by group" %)))

(streams
  ; tags event with a group name and publish it to the group channel.
  (smap (fn [e]
          (when-let [groupv (f/event2hostgroup e)]
            ; groupv can be nil, [], [hostgroup_OWL hostgroup_CC]
            (when (and (not= "HOSTGROUP_INFO" (:service e)) (seq groupv))
              ; not empty, pass on event to a group channel.
              (assoc e :group groupv))))
          (publish "group")))
